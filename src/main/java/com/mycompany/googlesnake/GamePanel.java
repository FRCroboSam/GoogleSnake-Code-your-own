/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.googlesnake;

import com.mycompany.googlesnake.GameTask.Move;
import com.mycompany.googlesnake.GameParams;
import com.mycompany.googlesnake.GameTask;
import com.mycompany.googlesnake.TileCords;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import org.imgscalr.Scalr;

/**
 *
 * @author samue
 */
public class GamePanel extends javax.swing.JPanel {

    private static Snake snake; 
    public static JTextArea editTextArea = new JTextArea("Type Here!");

    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();


    }
    public void setSnake(Snake snake2){
        snake = snake2; 
    }
    public Snake getSnake(){
        return snake;  
    }

    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        drawBoard(g); 
        snake.drawSnake(g); 
        if(snake.gameOver){
            Font stringFont = new Font( "SansSerif", Font.BOLD, 40 );
            g.setFont(stringFont); 
            g.setColor(Color.BLACK);
            g.drawString("Game Over", 250, 250);
            drawLeaderboard(g); 

        }
        

        
       


        
    }
    public void drawLeaderboard(Graphics g){
        Font stringFont = new Font( "SansSerif", Font.BOLD, 40 );
        g.setFont(stringFont); 
        g.setColor(Color.BLACK);
        g.drawString("Leaderboards", 400, 300);
        int y = 300; 
        for (Map.Entry<String, Integer> entry : snake.scoreBoard.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            y+=50; 
            g.drawString(key + ": "  + value, 400, y);
        }
        g.drawString("Your Score: " + snake.score, 400, y + 50);
        
    }
    public void drawBoard(Graphics g){
        Color lastTileColor = Color.GREEN; 
        for(int row = 0; row < GameParams.NUM_ROWS; row++){
            for(int col = 0; col < GameParams.NUM_COLUMNS; col++){
                if(lastTileColor == Color.GREEN){
                    g.setColor(Color.YELLOW);
                    lastTileColor = Color.YELLOW; 
                }
                else{
                    g.setColor(Color.GREEN);
                    lastTileColor = Color.GREEN; 
                }
                Point cords = TileCords.calculatePixelCords(row, col); 
                g.fillRect(cords.x, cords.y, GameParams.TILE_WIDTH, GameParams.TILE_HEIGHT);
            }
        }
    }
    BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {
        Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_DEFAULT);
        BufferedImage outputImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
        outputImage.getGraphics().drawImage(resultingImage, 0, 0, null);
        return outputImage;
    }
    public void drawHead(Graphics g, int row, int col){

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 901, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 652, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
  public void registerKeyActions(){
        Action left = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //do nothing
                GameTask.setCurrentMove(Move.LEFT);
            }
        };  
        Action right = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //do nothing
                GameTask.setCurrentMove(Move.RIGHT);
                
            }
        };
        Action up = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //do nothing
                GameTask.setCurrentMove(Move.UP);
            }
        };
        Action down = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //do nothing
                GameTask.setCurrentMove(Move.DOWN);
            }
        };
        this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("LEFT"), "LEFT");
        this.getActionMap().put("LEFT", left);
        this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("RIGHT"), "RIGHT");
        this.getActionMap().put("RIGHT", right);        
        this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("UP"), "UP");
        this.getActionMap().put("UP", up);        
        this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("DOWN"), "DOWN");
        this.getActionMap().put("DOWN", down);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
